THEORY ProofList IS
_f(1) & _f(2) & _f(11) & _f(54) & WellDefinedness_printnumquery.1,(_f(64) => _f(88));
_f(1) & _f(2) & _f(11) & WellDefinedness_Precondition_exchange.2,(_f(72) & _f(71) & _f(79) & _f(68) & _f(64) => _f(76));
_f(1) & _f(2) & _f(11) & WellDefinedness_Precondition_exchange.1,(_f(72) & _f(71) & _f(79) & _f(64) => _f(75));
_f(1) & _f(2) & _f(11) & WellDefinedness_Precondition_unify.4,(_f(72) & _f(71) & _f(70) & _f(69) & _f(68) & _f(64) => _f(76));
_f(1) & _f(2) & _f(11) & WellDefinedness_Precondition_unify.3,(_f(72) & _f(71) & _f(70) & _f(69) & _f(64) => _f(75));
_f(1) & _f(2) & _f(11) & WellDefinedness_Precondition_unify.2,(_f(72) & _f(71) & _f(70) & _f(64) => _f(74));
_f(1) & _f(2) & _f(11) & WellDefinedness_Precondition_unify.1,(_f(72) & _f(71) & _f(64) => _f(73));
_f(1) & _f(2) & _f(11) & WellDefinedness_Precondition_add.2,(_f(23) & _f(54) & _f(63) & _f(64) => _f(66));
_f(1) & _f(2) & _f(11) & WellDefinedness_Precondition_add.1,(_f(23) & _f(54) & _f(64) => _f(65));
_f(1) & _f(2) & _f(11) & _f(47) & maintenance.3,(_f(38) & _f(4) => _f(51));
_f(1) & _f(2) & _f(11) & _f(47) & maintenance.2,(_f(48) & _f(4) => _f(50));
_f(1) & _f(2) & _f(11) & _f(47) & maintenance.1,(_f(4) & _f(5) => _f(49));
_f(1) & _f(2) & _f(11) & _f(42) & exchange.3,(_f(38) & _f(4) => _f(46));
_f(1) & _f(2) & _f(11) & _f(42) & exchange.2,(_f(43) & _f(4) => _f(45));
_f(1) & _f(2) & _f(11) & _f(42) & exchange.1,(_f(4) & _f(5) => _f(44));
_f(1) & _f(2) & _f(11) & _f(36) & unify.3,(_f(38) & _f(4) => _f(41));
_f(1) & _f(2) & _f(11) & _f(36) & unify.2,(_f(37) & _f(4) => _f(40));
_f(1) & _f(2) & _f(11) & _f(36) & unify.1,(_f(4) & _f(5) => _f(39));
_f(1) & _f(2) & _f(11) & _f(32) & unsetbarred.2,(_f(33) & _f(4) => _f(35));
_f(1) & _f(2) & _f(11) & _f(32) & unsetbarred.1,(_f(4) & _f(7) => _f(34));
_f(1) & _f(2) & _f(11) & _f(28) & setbarred.2,(_f(29) & _f(4) => _f(31));
_f(1) & _f(2) & _f(11) & _f(28) & setbarred.1,(_f(4) & _f(7) => _f(30));
_f(1) & _f(2) & _f(11) & _f(23) & ban.3,(_f(14) & _f(4) => _f(27));
_f(1) & _f(2) & _f(11) & _f(23) & ban.2,(_f(24) & _f(4) => _f(26));
_f(1) & _f(2) & _f(11) & _f(23) & ban.1,(_f(4) & _f(5) => _f(25));
_f(1) & _f(2) & _f(11) & _f(18) & block.3,(_f(14) & _f(4) => _f(22));
_f(1) & _f(2) & _f(11) & _f(18) & block.2,(_f(19) & _f(4) => _f(21));
_f(1) & _f(2) & _f(11) & _f(18) & block.1,(_f(4) & _f(5) => _f(20));
_f(1) & _f(2) & _f(11) & _f(12) & add.3,(_f(14) & _f(4) => _f(17));
_f(1) & _f(2) & _f(11) & _f(12) & add.2,(_f(13) & _f(4) => _f(16));
_f(1) & _f(2) & _f(11) & _f(12) & add.1,(_f(4) & _f(5) => _f(15));
_f(1) & _f(2) & Initialisation.4,(_f(3) & _f(4) => _f(10));
_f(1) & _f(2) & Initialisation.3,(_f(3) & _f(4) => _f(9));
_f(1) & _f(2) & Initialisation.2,(_f(4) & _f(7) => _f(8));
_f(1) & _f(2) & Initialisation.1,(_f(4) & _f(5) => _f(6))
END
&
THEORY Formulas IS
((NAT) = (((0) .. (2147483647)))) & ((INT) = (((-2147483647) .. (2147483647))));
USER: FIN(INTEGER) & not(USER = {}) & PRINTER: FIN(INTEGER) & not(PRINTER = {}) & OPTION: FIN(INTEGER) & not(OPTION = {}) & ((1..2)*{PERMISSION}): FIN(NATURAL*{PERMISSION}) & not(((1..2)*{PERMISSION}) = {}) & ((options) : (((PRINTER) <-> (OPTION)))) & ((dom(options)) = (PRINTER)) & ((ran(options)) = (OPTION));
((uu) : (dom({})));
"Invariant is preserved";
"Check invariant ((access) : (((USER) <-> (PRINTER))))";
(({}) : (((USER) <-> (PRINTER))));
"Check invariant ((barred) : (((USER) <-> (OPTION))))";
(({}) : (((USER) <-> (OPTION))));
(card(({} )[({uu})]) <= 6);
((card(((({} )[({uu})]) /\ (((({}) ; (options)) )[({uu})])))) = (0));
((access) : (((USER) <-> (PRINTER)))) & ((barred) : (((USER) <-> (OPTION)))) & !(uu).(((((uu) : (dom(access)))) => ((card((access )[({uu})]) <= 6)))) & !(uu).(((((uu) : (dom(barred)))) => (((card((((barred )[({uu})]) /\ ((((access) ; (options)) )[({uu})])))) = (0)))));
((uu) : (USER)) & ((pp) : (PRINTER)) & (card((access )[({uu})]) +1 <= 6) & ((card((((barred )[({uu})]) /\ ((options )[({pp})])))) = (0));
((uu$1) : (dom(((access) \/ (({((uu) |-> (pp))}))))));
((uu$1) : (dom(barred)));
((((access) \/ (({((uu) |-> (pp))})))) : (((USER) <-> (PRINTER))));
(card((((access) \/ (({((uu) |-> (pp))}))) )[({uu$1})]) <= 6);
((card((((barred )[({uu$1})]) /\ ((((((access) \/ (({((uu) |-> (pp))})))) ; (options)) )[({uu$1})])))) = (0));
((uu) : (USER)) & ((pp) : (PRINTER));
((uu$1) : (dom((access - ({((uu) |-> (pp))})))));
(((access - ({((uu) |-> (pp))}))) : (((USER) <-> (PRINTER))));
(card(((access - ({((uu) |-> (pp))})) )[({uu$1})]) <= 6);
((card((((barred )[({uu$1})]) /\ (((((access - ({((uu) |-> (pp))}))) ; (options)) )[({uu$1})])))) = (0));
((uu) : (USER));
((uu$1) : (dom(((({uu})) <<| (access)))));
((((({uu})) <<| (access))) : (((USER) <-> (PRINTER))));
(card((((({uu})) <<| (access)) )[({uu$1})]) <= 6);
((card((((barred )[({uu$1})]) /\ ((((((({uu})) <<| (access))) ; (options)) )[({uu$1})])))) = (0));
((uu) : (USER)) & ((oo) : (OPTION)) & not(((uu) |-> (oo)) : ((access) ; (options)));
((uu$1) : (dom(((barred) \/ (({((uu) |-> (oo))}))))));
((((barred) \/ (({((uu) |-> (oo))})))) : (((USER) <-> (OPTION))));
((card((((((barred) \/ (({((uu) |-> (oo))}))) )[({uu$1})]) /\ ((((access) ; (options)) )[({uu$1})])))) = (0));
((uu) : (USER)) & ((oo) : (OPTION));
((uu$1) : (dom((barred - ({((uu) |-> (oo))})))));
(((barred - ({((uu) |-> (oo))}))) : (((USER) <-> (OPTION))));
((card(((((barred - ({((uu) |-> (oo))})) )[({uu$1})]) /\ ((((access) ; (options)) )[({uu$1})])))) = (0));
((u1) : (USER)) & ((u2) : (USER)) & (card((((access) \/ ((({u1}) * (access )[({u2})]))) )[({u1})]) <= 6) & (card((((access) \/ ((({u2}) * (access )[({u1})]))) )[({u2})]) <= 6) & ((card((((barred )[({u1})]) /\ ((((access) ; (options)) )[({u2})])))) = (0)) & ((card((((barred )[({u2})]) /\ ((((access) ; (options)) )[({u1})])))) = (0));
((uu) : (dom(((((access) \/ ((({u1}) * (access )[({u2})])))) \/ ((({u2}) * (access )[({u1})]))))));
((uu) : (dom(barred)));
((((((access) \/ ((({u1}) * (access )[({u2})])))) \/ ((({u2}) * (access )[({u1})])))) : (((USER) <-> (PRINTER))));
(card((((((access) \/ ((({u1}) * (access )[({u2})])))) \/ ((({u2}) * (access )[({u1})]))) )[({uu})]) <= 6);
((card((((barred )[({uu})]) /\ ((((((((access) \/ ((({u1}) * (access )[({u2})])))) \/ ((({u2}) * (access )[({u1})])))) ; (options)) )[({uu})])))) = (0));
((u1) : (USER)) & ((u2) : (USER)) & !(uu).(((((uu) : (USER)) & ((uu) = (u1))) => (not(((u1) = (u2)))))) & ((card((((barred )[({u1})]) /\ ((((access) ; (options)) )[({u2})])))) = (0)) & ((card((((barred )[({u2})]) /\ ((((access) ; (options)) )[({u1})])))) = (0));
((uu) : (dom((((((access - ((((({u1})) <| (access))) \/ (((({u2})) <| (access)))))) \/ ((({u1}) * (access )[({u2})])))) \/ ((({u2}) * (access )[({u1})]))))));
(((((((access - ((((({u1})) <| (access))) \/ (((({u2})) <| (access)))))) \/ ((({u1}) * (access )[({u2})])))) \/ ((({u2}) * (access )[({u1})])))) : (((USER) <-> (PRINTER))));
(card(((((((access - ((((({u1})) <| (access))) \/ (((({u2})) <| (access)))))) \/ ((({u1}) * (access )[({u2})])))) \/ ((({u2}) * (access )[({u1})]))) )[({uu})]) <= 6);
((card((((barred )[({uu})]) /\ (((((((((access - ((((({u1})) <| (access))) \/ (((({u2})) <| (access)))))) \/ ((({u1}) * (access )[({u2})])))) \/ ((({u2}) * (access )[({u1})])))) ; (options)) )[({uu})])))) = (0));
((pp) : (PRINTER)) & ((aa) : (PRINTER)) & !(tt).(((((tt) : (PRINTER)) & ((tt) = (pp))) => (not(((pp) = (aa)))))) & !(oo).(((((oo) : (OPTION)) & ((oo) : ((options )[({pp})]))) => (((oo) : ((options )[({aa})]))))) & !(oo).(((((oo) : (OPTION)) & ((oo) : ((options )[({aa})]))) => (((oo) : ((options )[({pp})])))));
((uu) : (dom((((access - ((access) |> (({pp}))))) \/ ((((access)~ )[({pp})] * ({aa})))))));
(((((access - ((access) |> (({pp}))))) \/ ((((access)~ )[({pp})] * ({aa}))))) : (((USER) <-> (PRINTER))));
(card(((((access - ((access) |> (({pp}))))) \/ ((((access)~ )[({pp})] * ({aa})))) )[({uu})]) <= 6);
((card((((barred )[({uu})]) /\ (((((((access - ((access) |> (({pp}))))) \/ ((((access)~ )[({pp})] * ({aa}))))) ; (options)) )[({uu})])))) = (0));
((((uu) |-> (oo))) : (((access) ; (options))));
not(((((uu) |-> (oo))) : (((access) ; (options)))));
((pp) : (PRINTER));
USER: FIN(INTEGER) & not(USER = {});
((dom(options)) = (PRINTER));
((options) : (((PRINTER) <-> (OPTION))));
((((uu) : (dom(access)))) => ((((access )[({uu})]) : (FIN((access )[({uu})])))));
((((uu) : (dom(barred)))) => ((((((barred )[({uu})]) /\ ((((access) ; (options)) )[({uu})]))) : (FIN((((barred )[({uu})]) /\ ((((access) ; (options)) )[({uu})])))))));
!(uu).(((((uu) : (dom(access)))) => ((card((access )[({uu})]) <= 6))));
((barred) : (((USER) <-> (OPTION))));
((access) : (((USER) <-> (PRINTER))));
(card((access )[({uu})]) +1 <= 6);
"Well definedness";
(((access )[({uu})]) : (FIN((access )[({uu})])));
(((((barred )[({uu})]) /\ ((options )[({pp})]))) : (FIN((((barred )[({uu})]) /\ ((options )[({pp})])))));
((oo) : (OPTION));
((card((((barred )[({u1})]) /\ ((((access) ; (options)) )[({u2})])))) = (0));
(card((((access) \/ ((({u2}) * (access )[({u1})]))) )[({u2})]) <= 6);
(card((((access) \/ ((({u1}) * (access )[({u2})]))) )[({u1})]) <= 6);
((u2) : (USER));
((u1) : (USER));
(((((access) \/ ((({u1}) * (access )[({u2})]))) )[({u1})]) : (FIN((((access) \/ ((({u1}) * (access )[({u2})]))) )[({u1})])));
(((((access) \/ ((({u2}) * (access )[({u1})]))) )[({u2})]) : (FIN((((access) \/ ((({u2}) * (access )[({u1})]))) )[({u2})])));
(((((barred )[({u1})]) /\ ((((access) ; (options)) )[({u2})]))) : (FIN((((barred )[({u1})]) /\ ((((access) ; (options)) )[({u2})])))));
(((((barred )[({u2})]) /\ ((((access) ; (options)) )[({u1})]))) : (FIN((((barred )[({u2})]) /\ ((((access) ; (options)) )[({u1})])))));
((((uu) : (USER))) => (btrue));
((((uu) : (USER)) & ((uu) = (u1))) => (btrue));
!(uu).(((((uu) : (USER)) & ((uu) = (u1))) => (not(((u1) = (u2))))));
((((tt) : (PRINTER))) => (btrue));
((((tt) : (PRINTER)) & ((tt) = (pp))) => (btrue));
((((oo) : (OPTION))) => (btrue));
((((oo) : (OPTION)) & ((oo) : ((options )[({pp})]))) => (btrue));
((((oo) : (OPTION)) & ((oo) : ((options )[({aa})]))) => (btrue));
!(oo).(((((oo) : (OPTION)) & ((oo) : ((options )[({pp})]))) => (((oo) : ((options )[({aa})])))));
!(tt).(((((tt) : (PRINTER)) & ((tt) = (pp))) => (not(((pp) = (aa))))));
((aa) : (PRINTER));
((((access) |> (({pp})))) : (FIN(((access) |> (({pp}))))))
END
&
THEORY EnumerateX IS
PERMISSION == {ok,noaccess}
END
